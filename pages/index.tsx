import Head from 'next/head'
// import { useEffect, useState } from 'react'
import { Button, Col, Container, Image, Row, Stack } from "react-bootstrap"
import { loadStripe } from '@stripe/stripe-js'


// getStaticPropsを使って、ビルド時点でデータの取得を済ませている <- 速い
export async function getStaticProps() {
  const products = await fetch('http://localhost:3000/api/products')
    .then(response => response.json())
  return {
    props: {
      products
    },
    revalidate: 1 * 60 // 1分
  }
}

export default function Home({ products }) {
  // ページの読み込み後にAPIを呼び出している
  // const [products, setProducts] = useState([])
  // useEffect(() => {
  //   fetch('http://localhost:3000/api/products')
  //     .then(response => response.json())
  //     .then(data => setProducts(data))
  // }, [setProducts])

  const handleCheckout = async (priceId: string) => {
    const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_API_KEY!)
    if (!stripe) return
    
    const response = await fetch('/api/checkout', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ priceId })
    })
    
    const { sessionId } = await response.json()
    await stripe.redirectToCheckout({ sessionId })
  }
  return (
    <main>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Stack gap={3}>
          {products.map(product => {
            return (
              <Row key={product.id}>
                <Col xs={4}>
                  <Image
                    src={product.images[0]}
                    alt={product.name}
                    style={{ maxWidth: '100%' }}
                  />
                </Col>
                <Col>
                  <Stack gap={3}>
                    <h2>{product.name}</h2>
                    <p>{product.description}</p>
                  </Stack>
                  <Stack direction="horizontal">
                    {product.prices.map(price => {
                      return (
                        <dl key={price.id}>
                          <dt>価格</dt>
                          <dd>
                            <span>{price.unit_amount.toLocaleString()} {price.currency.toLocaleUpperCase()}</span>
                            {price.transform_quantity ? <small>({price.transform_quantity.divide_by}アイテム毎)</small> : null}
                          </dd>
                          <dd>
                            <Button onClick={() => handleCheckout(price.id)}>いますぐ注文する</Button>
                          </dd>
                        </dl>
                      )
                    })}
                  </Stack>
                </Col>
              </Row>
            )
          })}
        </Stack>
      </Container>
    </main>
  )
}
